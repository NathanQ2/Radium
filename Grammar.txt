program         = { function_decl } ;

function_decl   = "func" identifier "(" /*[ param_list ]*/ ")" block ;

param_list      = param { "," param } ;
param           = identifier | number ;

block           = "{" { statement } "}" ;

statement       = var_decl ";"
                  | expr_stmt ";"
                  | return_stmt ";"
                  | block ";" ;

var_decl        = "let" assignment ;
expr_stmt       = expression ;
return_stmt     = "ret" expression ;

expression      = assignment | additive ;

assignment      = identifier "=" expression;

additive        = multiplicative ("+" /* | "-" */) multiplicative
                  | multiplicative ;
multiplicative  = primary /*{ ("*" | "/") primary } */ ;

primary         = number
                  | identifier
                  | call
                  /* | "(" expression ")" */ ;

call            = identifier "(" [ arg_list ] ")" ;
arg_list        = expression { "," expression } ;

identifier      = /* token from lexer: [a-zA-Z_][a-zA-Z0-9_]* */ ;
number          = /* token from lexer: decimal integer */ ;
